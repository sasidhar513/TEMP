
#include<bits/stdc++.h>
#define ALPHABET 256
using namespace std;

struct TrieNode{
    TrieNode  *nextNode;
    bool isLeaf;
    TrieNode(){
        nextNode=new TrieNode[ALPHABET];
    }
};
class Trie
{
    TrieNode * rootNode;
    public:
        TrieNode * createTrieNode();

    Trie();
    void  insertKey(string s);
    bool searchKey(string s);   
};
Trie::Trie(){
    rootNode= createTrieNode();
}
TrieNode * Trie::createTrieNode(){
    TrieNode * node;
    for(int i=0;i<ALPHABET;i++)
    {
        cout<<"hidia'"<<endl;
        node->nextNode[i]=NULL;
                cout<<"hidia'"<<endl;

    }
    node->isLeaf=false;
    return node;
}
void  Trie::insertKey(string s){
    TrieNode * root =rootNode;
    if(root->nextNode)
     cout<<"imd caaled"<<endl;
    for(int i=0;i<s.length();i++)
    {
            if(root->nextNode[s[i]]==NULL)
            {
                root->nextNode[s[i]]=createTrieNode();
            }
            else 
                root=root->nextNode[s[i]];
    }
}
bool Trie::searchKey(string s){
    TrieNode * root =rootNode;
    for(int i=0;i<s.length();i++){
        if(root->nextNode[s[i]]==NULL)
            return false;
        root=root->nextNode[s[i]];
    }
    return true;
}
int main(){
    Trie trie;
    int n,m;
    cin>>n>>m;
    for(int i=0;i< n;i++)
    {
        cout<<"sfd"<<endl;
        string ss;
        cin>>ss;
        trie.insertKey(ss);
    }
    for(int i=0;i<m;i++)
    {
                cout<<"sqfd"<<endl;

        string ss;
        cout<<trie.searchKey(ss);
    }
    return 0;
}
